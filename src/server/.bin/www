#!/usr/bin/env node

const app = require( '../index' );
const http = require( 'http' );
const spdy = require( 'spdy' );  
const fs = require( 'fs' );
const port = app.get( 'port' );
//const logger = require( './components/logger' );
/*
const options = 
{  
  key: fs.readFileSync( 'path/to/server.key' ),
  cert:  fs.readFileSync( 'path/to/server.crt' )
};
*/

/*const options = {
  // Private key 
  //key: fs.readFileSync(__dirname + '/keys/spdy-key.pem'),
 
  // Fullchain file or cert file (prefer the former) 
  //cert: fs.readFileSync(__dirname + '/keys/spdy-fullchain.pem'),
 
  // **optional** SPDY-specific options 
  spdy: {
    protocols: [ 'h2', 'spdy/3.1', 'http/1.1' ],
    plain: false,
 
    // **optional** 
    // Parse first incoming X_FORWARDED_FOR frame and put it to the 
    // headers of every request. 
    // NOTE: Use with care! This should not be used without some proxy that 
    // will *always* send X_FORWARDED_FOR 
    'x-forwarded-for': true,
 
    connection: {
      windowSize: 1024 * 1024, // Server's window size 
 
      // **optional** if true - server will send 3.1 frames on 3.0 *plain* spdy 
      autoSpdy31: false
    }
  }
}*/

//const server = spdy.createServer( options, app )
const server = http.createServer( app )
server.listen( port );
server.on( 'error', onError );
server.on( 'listening', onListening );

/*================================================
 * Event listener for HTTP server "error" event.
  ================================================ */
function onError( error ) 
{
  if ( error.syscall !== 'listen' ) 
  {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  switch ( error.code ) 
  {
    case 'EACCES':
      //logger.error( bind + ' requires elevated privileges' );
      process.exit(1);
      break;
    case 'EADDRINUSE':
      //logger.error( bind + ' is already in use' );
      process.exit( 1 );
      break;
    default:
      throw error;
  };
};

/* ==================================================
 * Event listener for HTTP server "listening" event.
   ================================================== */
function onListening() 
{
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
    console.log('init - awesome server');
   // logger.info('init - awesome server');
};
